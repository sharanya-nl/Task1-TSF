# Importing all libraries
import pandas as pd
import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt  
%matplotlib inline

# Reading the data
url = "http://bit.ly/w-data"
s_data = pd.read_csv(url)
print("Data imported")
data.head(10)


#Creating a Scatter plot using the data points to see the relation between the data in the set.
#For using grids in the graph background
sns.set_style('whitegrid')

#Plotting X as Hours and Y as Scores
data.plot(x='Hours',y='Scores',style='o')
plt.title('Hours vs Percentage score')
plt.xlabel("Hours studied")
plt.ylabel("Percentage score")
plt.show()

The next step is to divide the data into "attributes" (inputs) and "labels" (outputs).
X = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values  

#Now the data can be split into training and test sets. 
#Using Scikit-Learn's built-in train_test_split() method:

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y,test_size=0.2, random_state=0)


Training the algoritum--

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit(X_train, y_train) 
print("Training complete.")

Plotting the regression line--
line = regressor.coef_*X+regressor.intercept_

#Plotting for the test data--
plt.scatter(X, y)
plt.plot(X, line);
plt.show()

MAKING PREDICTIONS
#By testing data in hours and predicting the scores--

print(X_test)
y_pred = regressor.predict(X_test)
y_pred
y_test

# Comparing actual vs predicted data

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

#### Evaluating the model-
Using MAE- mean absolute error method which hepls to compare the absolute difference between 
actual and predicted values.

from sklearn import metrics
from sklearn.metrics import r2_score
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  
print(' r2:', metrics.r2_score(y_test, y_pred))     

### To Predict the score if the student studies for 9.25 hr/day.
#Solving the problem
hours = [[9.25]]
own_pred = regressor.predict(hours)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred[0])















                                                                          
